{
  "id": null,
  "user_id": "2",
  "topic": "React",
  "experience_level": "beginner",
  "time_commitment": "5-10 hours per week",
  "learning_goals": "",
  "study_plan": {
    "topic": "React",
    "experience_level": "beginner",
    "time_commitment": "5-10 hours per week",
    "learning_goals": "",
    "total_weeks": 6,
    "weekly_goals": [
      {
        "week_number": 1,
        "title": "Introduction to React and JSX",
        "description": "Understanding the fundamentals of React, JSX syntax, and setting up your development environment.",
        "resources": [
          {
            "title": "React JS Explained In 10 Minutes",
            "description": "A list of the core concepts every React developer should have a solid grasp on. React Course: ...",
            "url": "https://www.youtube.com/watch?v=s2skans2dP4",
            "resource_type": "youtube_video",
            "duration": "PT10M",
            "difficulty": null,
            "tags": [
              "Programming",
              "Software Developer",
              "Dennis Ivy",
              "Dennis Ivanov"
            ],
            "estimated_completion_time": null
          },
          {
            "title": "What Is ReactJS? | ReactJS Tutorial For Beginners | Learn ReactJS | ReactJS  Basics | Simplilearn",
            "description": "Full Stack Java Developer Program (Discount Code - YTBE15) ...",
            "url": "https://www.youtube.com/watch?v=Y6aYx_KKM7A",
            "resource_type": "youtube_video",
            "duration": "PT9M30S",
            "difficulty": null,
            "tags": [
              "reactjs basics",
              "what is reactjs",
              "learn reactjs",
              "reactjs tutorial for beginners",
              "reactjs tutorial",
              "reactjs project",
              "reactjs crash course",
              "reactjs project from scratch",
              "reactjs beginner tutorial",
              "reactjs basic concepts",
              "reactjs beginners",
              "reactjs build for production",
              "reactjs beginner to advanced",
              "reactjs beginner projects",
              "reactjs tutorial beginner to advanced",
              "react js project step by step",
              "reactjs simplilearn",
              "simplilearn",
              "react js",
              "react js tutorial"
            ],
            "estimated_completion_time": null
          },
          {
            "title": "Every React Concept Explained in 12 Minutes",
            "description": "My React course: https://reactbootcamp.dev Chapters 0:00 - Intro 0:11 - Components 0:29 - JSX 1:02 - Curly Braces 1:29 ...",
            "url": "https://www.youtube.com/watch?v=wIyHSOugGGw",
            "resource_type": "youtube_video",
            "duration": "PT11M53S",
            "difficulty": null,
            "tags": [],
            "estimated_completion_time": null
          },
          {
            "title": "react-intros",
            "description": "An Introduction to ReactJS. Basic concepts and example codes for React beginners.",
            "url": "https://github.com/ZhongyangMA/react-intros",
            "resource_type": "github_project",
            "duration": null,
            "difficulty": null,
            "tags": [
              "example",
              "jsx",
              "props",
              "react",
              "react-exercise",
              "reactjs",
              "samples",
              "tutorial",
              "tutorial-exercises"
            ],
            "estimated_completion_time": null
          },
          {
            "title": "react-essentials",
            "description": "\ud83d\ude80 A simple introduction to React essentials: Components, JSX, Props, and State \ud83d\ude80",
            "url": "https://github.com/ch0ripain/react-essentials",
            "resource_type": "github_project",
            "duration": null,
            "difficulty": null,
            "tags": [
              "frontend",
              "react",
              "react-basic-concepts",
              "reactjs",
              "web-development"
            ],
            "estimated_completion_time": null
          }
        ],
        "objectives": [
          "Set up a React development environment.",
          "Understand JSX syntax and its purpose.",
          "Create a simple React component.",
          "Render components to the DOM."
        ],
        "estimated_hours": 6.0,
        "deadline": "2024-10-27 00:00:00",
        "completed": false,
        "progress_percentage": 0.0
      },
      {
        "week_number": 2,
        "title": "Components and Props",
        "description": "Working with components, props, and passing data between components.",
        "resources": [
          {
            "title": "React JS Tutorial for Beginners | Props",
            "description": "React JS Tutorial for Beginners | Props Welcome to our React JS tutorial for beginners! In this video, we'll dive into one of the most ...",
            "url": "https://www.youtube.com/watch?v=OGxojAD-x80",
            "resource_type": "youtube_video",
            "duration": "PT5M1S",
            "difficulty": null,
            "tags": [
              "react",
              "react props",
              "props in react",
              "react props example",
              "react for beginners",
              "react tutorial for beginners",
              "react tutorials",
              "react full course",
              "react full tutorial",
              "easy react tutorial",
              "easy react",
              "easy react course",
              "how to learn react",
              "how to master in react",
              "react project",
              "react basics",
              "basics in react",
              "reactjs",
              "react js",
              "react js props",
              "props in react js",
              "React props explained",
              "react props rules",
              "props in react explained",
              "react props basics",
              "react basics props"
            ],
            "estimated_completion_time": null
          },
          {
            "title": "React Components | ReactJS Tutorial | React Elements | React Props | Styling in React",
            "description": "In this React component tutorial, we'll be learning about React components, ReactJS, and React props. We'll also be exploring ...",
            "url": "https://www.youtube.com/watch?v=BzI8OWBoIVg",
            "resource_type": "youtube_video",
            "duration": "PT14M39S",
            "difficulty": null,
            "tags": [
              "react components",
              "react",
              "react js",
              "react tutorial",
              "how to create react components",
              "reactjs",
              "react tutorial for beginners",
              "reactjs tutorial",
              "components",
              "reactjs tutorial for beginners",
              "react basics",
              "react js tutorial",
              "react fundamentals",
              "react components explained",
              "what are react components",
              "learn react js",
              "learn react",
              "react course",
              "Styling in React",
              "ReactJS Tutorial",
              "React Elements",
              "React Props",
              "nested react components",
              "react component types",
              "react for beginners"
            ],
            "estimated_completion_time": null
          },
          {
            "title": "Props in React Js -  React Tutorial - 06",
            "description": "Props in React Js - React Tutorial Welcome back to our React tutorial series! In this video, we'll explore the concept of React ...",
            "url": "https://www.youtube.com/watch?v=_egdOzhXsac",
            "resource_type": "youtube_video",
            "duration": "PT8M52S",
            "difficulty": null,
            "tags": [
              "#ReactProps",
              "#ReactTutorial",
              "#ReactComponents",
              "#WebDevelopment",
              "#FrontEndDevelopment",
              "#JavaScript",
              "#ReactJS",
              "#CodingTutorial",
              "#ProgrammingTutorial",
              "#LearnReact",
              "#PropsInReact",
              "#ComponentProps",
              "#ReactStyling"
            ],
            "estimated_completion_time": null
          },
          {
            "title": "react-scanner",
            "description": "Extract React components and props usage from code.",
            "url": "https://github.com/moroshko/react-scanner",
            "resource_type": "github_project",
            "duration": null,
            "difficulty": null,
            "tags": [
              "abstract-syntax-tree",
              "components",
              "jsx",
              "react",
              "stats",
              "usage"
            ],
            "estimated_completion_time": null
          },
          {
            "title": "macro-components",
            "description": "Create flexible layout and composite UI components without the need to define arbitrary custom props",
            "url": "https://github.com/jxnblk/macro-components",
            "resource_type": "github_project",
            "duration": null,
            "difficulty": null,
            "tags": [
              "components",
              "composite-components",
              "react",
              "style",
              "styled-components",
              "ui"
            ],
            "estimated_completion_time": null
          }
        ],
        "objectives": [
          "Create reusable components.",
          "Pass data to components using props.",
          "Understand prop types.",
          "Build a simple application with multiple components."
        ],
        "estimated_hours": 6.0,
        "deadline": "2024-11-03 00:00:00",
        "completed": false,
        "progress_percentage": 0.0
      },
      {
        "week_number": 3,
        "title": "State and Events",
        "description": "Managing component state and handling user events.",
        "resources": [
          {
            "title": "Lecture 4.3- React-State and Event Handlers,|  React.js beginner tutorial, MERN Stack Tutorial 2023",
            "description": "Please Like, Share & Subscribe Follow me on Twitter --https://twitter.com/yadvendra016 LinkedIn ...",
            "url": "https://www.youtube.com/watch?v=HeeWdk7dnYU",
            "resource_type": "youtube_video",
            "duration": "PT10M44S",
            "difficulty": null,
            "tags": [
              "coding",
              "How to code",
              "Tips and tricks",
              "tech knowledge",
              "Java",
              "java tutorial",
              "education",
              "computer science"
            ],
            "estimated_completion_time": null
          },
          {
            "title": "18 Events Handling with React Product Item | React JS Tutorial 2021 | NAVEEN SAGGAM",
            "description": "React JS Tutorial for Beginners 2022 by NAVEEN SAGGAM from UiBrains Technologies. Here you will learn the React JS from ...",
            "url": "https://www.youtube.com/watch?v=PnRqcmuf5HE",
            "resource_type": "youtube_video",
            "duration": "PT12M36S",
            "difficulty": null,
            "tags": [
              "ui development",
              "ui technologies",
              "uibrains",
              "naveen saggam",
              "ui training",
              "web development",
              "angular",
              "react js",
              "online training"
            ],
            "estimated_completion_time": null
          },
          {
            "title": "16 Events Handling with React Counter | React JS Tutorial 2021 | NAVEEN SAGGAM",
            "description": "React JS Tutorial for Beginners 2022 by NAVEEN SAGGAM from UiBrains Technologies. Here you will learn the React JS from ...",
            "url": "https://www.youtube.com/watch?v=aXDsgYgcuss",
            "resource_type": "youtube_video",
            "duration": "PT15M30S",
            "difficulty": null,
            "tags": [
              "ui development",
              "ui technologies",
              "uibrains",
              "naveen saggam",
              "ui training",
              "web development",
              "angular",
              "react js",
              "online training"
            ],
            "estimated_completion_time": null
          },
          {
            "title": "storeon",
            "description": "\ud83c\udf29 A tiny (185 bytes) event-based Redux-like state manager for React, Preact, Angular, Vue, and Svelte",
            "url": "https://github.com/storeon/storeon",
            "resource_type": "github_project",
            "duration": null,
            "difficulty": null,
            "tags": [],
            "estimated_completion_time": null
          },
          {
            "title": "linkstate",
            "description": "Bind events to state. Works with Preact and React.",
            "url": "https://github.com/developit/linkstate",
            "resource_type": "github_project",
            "duration": null,
            "difficulty": null,
            "tags": [
              "event-handlers",
              "handler",
              "linkstate",
              "preact"
            ],
            "estimated_completion_time": null
          }
        ],
        "objectives": [
          "Understand and use component state.",
          "Handle events using event handlers.",
          "Update state based on user interactions.",
          "Build a simple counter app."
        ],
        "estimated_hours": 6.0,
        "deadline": "2024-11-10 00:00:00",
        "completed": false,
        "progress_percentage": 0.0
      },
      {
        "week_number": 4,
        "title": "Lists and Conditional Rendering",
        "description": "Rendering lists of data and conditionally rendering components.",
        "resources": [
          {
            "title": "React Course #11 - React full Tutorial - Rendering Lists &amp; Conditional content",
            "description": "Welcome to CS Tutorials! This is Modren React Learning Course. If you interest in front-end web development React is best ...",
            "url": "https://www.youtube.com/watch?v=uQWW7uRMQd0",
            "resource_type": "youtube_video",
            "duration": "PT4M26S",
            "difficulty": null,
            "tags": [
              "react js",
              "React.js",
              "react components",
              "node js",
              "node.js",
              "javascript",
              "web design",
              "web development",
              "coding",
              "programming"
            ],
            "estimated_completion_time": null
          },
          {
            "title": "Master List &amp; Conditional Rendering in React \ud83d\udd25 | Beginner to Advanced Tutorial",
            "description": "Are you struggling with list and conditional rendering in React? In this tutorial, we break down everything you need to know ...",
            "url": "https://www.youtube.com/watch?v=-Z4s1Moc4OA",
            "resource_type": "youtube_video",
            "duration": "PT11M9S",
            "difficulty": null,
            "tags": [],
            "estimated_completion_time": null
          },
          {
            "title": "React Tutorial #7 React Conditional Rendering with List | Dr Vipin Classes",
            "description": "Conditional Rendering with List in React | React Conditional Rendering | Dr Vipin Classes About this video: In this video, ...",
            "url": "https://www.youtube.com/watch?v=VZzYS2WGqMU",
            "resource_type": "youtube_video",
            "duration": "PT4M47S",
            "difficulty": null,
            "tags": [
              "Conditional Rendering with List in React",
              "React Conditional Rendering",
              "react",
              "react js",
              "react rendering",
              "render in react",
              "simple react programming",
              "easy react programming",
              "conditional rendering in react",
              "rendering with list",
              "React",
              "React Tutorial",
              "React Tutorial for Beginners",
              "React Basics",
              "React Fundamentals",
              "Reactjs",
              "Reactjs Tutorial",
              "Reactjs Tutorial for Beginners",
              "React.js",
              "React js"
            ],
            "estimated_completion_time": null
          },
          {
            "title": "React-basics-and-beyond",
            "description": "A comprehensive React project demonstrating core concepts like components, props, state, event handling, forms, conditional rendering, lists, routing with React Router, Context API, hooks, and styling. Perfect for beginners to learn and practice React step by step.",
            "url": "https://github.com/codecraft-sanju/React-basics-and-beyond",
            "resource_type": "github_project",
            "duration": null,
            "difficulty": null,
            "tags": [],
            "estimated_completion_time": null
          },
          {
            "title": "Lists-And-Conditional-Rendering-in-ReactJS-SMTraining",
            "description": "No description available",
            "url": "https://github.com/RuturajSutar/Lists-And-Conditional-Rendering-in-ReactJS-SMTraining",
            "resource_type": "github_project",
            "duration": null,
            "difficulty": null,
            "tags": [],
            "estimated_completion_time": null
          }
        ],
        "objectives": [
          "Render lists of data using map function.",
          "Conditonally render components.",
          "Build a simple contact list app."
        ],
        "estimated_hours": 4.5,
        "deadline": "2024-11-17 00:00:00",
        "completed": false,
        "progress_percentage": 0.0
      },
      {
        "week_number": 5,
        "title": "Forms and Controlled Components",
        "description": "Building forms and handling user input.",
        "resources": [
          {
            "title": "ReactJS - Form Handling &amp; Controlled Components | ReactJS made easy",
            "description": "ReactJS Form handling is discussed in this video. We will also be looking at the concept of Controlled Components in React.",
            "url": "https://www.youtube.com/watch?v=yrcXX2SzTvg",
            "resource_type": "youtube_video",
            "duration": "PT11M38S",
            "difficulty": null,
            "tags": [
              "react form validation",
              "react tutorial",
              "react form",
              "reactjs forms",
              "react js form validation",
              "react js form submit example",
              "reactjs controlled components",
              "reactjs components",
              "reactjs component communication",
              "reactjs component lifecycle",
              "react",
              "react tutorial for beginners",
              "react basics",
              "react fundamentals",
              "reactjs",
              "reactjs tutorial",
              "reactjs tutorial for beginners",
              "react.js",
              "react js",
              "form",
              "form handling",
              "form handling in react"
            ],
            "estimated_completion_time": null
          },
          {
            "title": "Form Handling using Controlled Components in React JS | React JS Tutorial in Hindi #20",
            "description": "In this video, We are explaining Form Handling using Controller Components in React JS (React JS New Course 2021 ). Please ...",
            "url": "https://www.youtube.com/watch?v=CP3-e-9uJ_A",
            "resource_type": "youtube_video",
            "duration": "PT9M2S",
            "difficulty": null,
            "tags": [
              "WsCube Tech",
              "React JS Components",
              "React Component in Hindi",
              "React JS Components Explained",
              "Controller Components in React JS",
              "Form Handling using Controlled Components",
              "Form Handling in React JS",
              "React JS Functional Components",
              "React JS Functional Components in Hindi",
              "React JS Tutorial in Hindi",
              "React JS",
              "React JS Components Best Practices",
              "React JS Controlled Components",
              "React JS Latest Course",
              "Learn React JS"
            ],
            "estimated_completion_time": null
          },
          {
            "title": "React Tutorial: Handling Forms in React (Controlled &amp; UnControlled Components)",
            "description": "In this video I have explained about how to handle forms in React. There are two types of components in React in case of form ...",
            "url": "https://www.youtube.com/watch?v=CLDl-MUXdq0",
            "resource_type": "youtube_video",
            "duration": "PT11M14S",
            "difficulty": null,
            "tags": [
              "#react",
              "#reactforms",
              "#javascript"
            ],
            "estimated_completion_time": null
          },
          {
            "title": "big-o-performance-java",
            "description": "# big-o-performance A simple html app to demonstrate performance costs of data structures.  - Clone the project - Navigate to the root of the project in a termina or command prompt - Run 'npm install' - Run 'npm start' - Go to the URL specified in the terminal or command prompt to try out the app.  # This app was created from the Create React App NPM.  Below are instructions from that project.  Below you will find some information on how to perform common tasks.   You can find the most recent version of this guide [here](https://github.com/facebookincubator/create-react-app/blob/master/template/README.md).  ## Table of Contents  - [Updating to New Releases](#updating-to-new-releases) - [Sending Feedback](#sending-feedback) - [Folder Structure](#folder-structure) - [Available Scripts](#available-scripts)   - [npm start](#npm-start)   - [npm run build](#npm-run-build)   - [npm run eject](#npm-run-eject) - [Displaying Lint Output in the Editor](#displaying-lint-output-in-the-editor) - [Installing a Dependency](#installing-a-dependency) - [Importing a Component](#importing-a-component) - [Adding a Stylesheet](#adding-a-stylesheet) - [Post-Processing CSS](#post-processing-css) - [Adding Images and Fonts](#adding-images-and-fonts) - [Adding Bootstrap](#adding-bootstrap) - [Adding Flow](#adding-flow) - [Adding Custom Environment Variables](#adding-custom-environment-variables) - [Integrating with a Node Backend](#integrating-with-a-node-backend) - [Proxying API Requests in Development](#proxying-api-requests-in-development) - [Deployment](#deployment)   - [Now](#now)   - [Heroku](#heroku)   - [Surge](#surge)   - [GitHub Pages](#github-pages) - [Something Missing?](#something-missing)  ## Updating to New Releases  Create React App is divided into two packages:  * `create-react-app` is a global command-line utility that you use to create new projects. * `react-scripts` is a development dependency in the generated projects (including this one).  You almost never need to update `create-react-app` itself: it\u2019s delegates all the setup to `react-scripts`.  When you run `create-react-app`, it always creates the project with the latest version of `react-scripts` so you\u2019ll get all the new features and improvements in newly created apps automatically.  To update an existing project to a new version of `react-scripts`, [open the changelog](https://github.com/facebookincubator/create-react-app/blob/master/CHANGELOG.md), find the version you\u2019re currently on (check `package.json` in this folder if you\u2019re not sure), and apply the migration instructions for the newer versions.  In most cases bumping the `react-scripts` version in `package.json` and running `npm install` in this folder should be enough, but it\u2019s good to consult the [changelog](https://github.com/facebookincubator/create-react-app/blob/master/CHANGELOG.md) for potential breaking changes.  We commit to keeping the breaking changes minimal so you can upgrade `react-scripts` painlessly.  ## Sending Feedback  We are always open to [your feedback](https://github.com/facebookincubator/create-react-app/issues).  ## Folder Structure  After creation, your project should look like this:  ``` my-app/   README.md   index.html   favicon.ico   node_modules/   package.json   src/     App.css     App.js     index.css     index.js     logo.svg ```  For the project to build, **these files must exist with exact filenames**:  * `index.html` is the page template; * `favicon.ico` is the icon you see in the browser tab; * `src/index.js` is the JavaScript entry point.  You can delete or rename the other files.  You may create subdirectories inside `src`. For faster rebuilds, only files inside `src` are processed by Webpack.   You need to **put any JS and CSS files inside `src`**, or Webpack won\u2019t see them.  You can, however, create more top-level directories.   They will not be included in the production build so you can use them for things like documentation.  ## Available Scripts  In the project directory, you can run:  ### `npm start`  Runs the app in the development mode.<br> Open [http://localhost:3000](http://localhost:3000) to view it in the browser.  The page will reload if you make edits.<br> You will also see any lint errors in the console.  ### `npm run build`  Builds the app for production to the `build` folder.<br> It correctly bundles React in production mode and optimizes the build for the best performance.  The build is minified and the filenames include the hashes.<br> Your app is ready to be deployed!  ### `npm run eject`  **Note: this is a one-way operation. Once you `eject`, you can\u2019t go back!**  If you aren\u2019t satisfied with the build tool and configuration choices, you can `eject` at any time. This command will remove the single build dependency from your project.  Instead, it will copy all the configuration files and the transitive dependencies (Webpack, Babel, ESLint, etc) right into your project so you have full control over them. All of the commands except `eject` will still work, but they will point to the copied scripts so you can tweak them. At this point you\u2019re on your own.  You don\u2019t have to ever use `eject`. The curated feature set is suitable for small and middle deployments, and you shouldn\u2019t feel obligated to use this feature. However we understand that this tool wouldn\u2019t be useful if you couldn\u2019t customize it when you are ready for it.  ## Displaying Lint Output in the Editor  >Note: this feature is available with `react-scripts@0.2.0` and higher.  Some editors, including Sublime Text, Atom, and Visual Studio Code, provide plugins for ESLint.  They are not required for linting. You should see the linter output right in your terminal as well as the browser console. However, if you prefer the lint results to appear right in your editor, there are some extra steps you can do.  You would need to install an ESLint plugin for your editor first.  >**A note for Atom `linter-eslint` users**  >If you are using the Atom `linter-eslint` plugin, make sure that **Use global ESLint installation** option is checked:  ><img src=\"http://i.imgur.com/yVNNHJM.png\" width=\"300\">  Then make sure `package.json` of your project ends with this block:  ```js {   // ...   \"eslintConfig\": {     \"extends\": \"./node_modules/react-scripts/config/eslint.js\"   } } ```  Projects generated with `react-scripts@0.2.0` and higher should already have it.   If you don\u2019t need ESLint integration with your editor, you can safely delete those three lines from your `package.json`.  Finally, you will need to install some packages *globally*:  ```sh npm install -g eslint babel-eslint eslint-plugin-react eslint-plugin-import eslint-plugin-jsx-a11y eslint-plugin-flowtype ```  We recognize that this is suboptimal, but it is currently required due to the way we hide the ESLint dependency. The ESLint team is already [working on a solution to this](https://github.com/eslint/eslint/issues/3458) so this may become unnecessary in a couple of months.  ## Installing a Dependency  The generated project includes React and ReactDOM as dependencies. It also includes a set of scripts used by Create React App as a development dependency. You may install other dependencies (for example, React Router) with `npm`:  ``` npm install --save <library-name> ```  ## Importing a Component  This project setup supports ES6 modules thanks to Babel.   While you can still use `require()` and `module.exports`, we encourage you to use [`import` and `export`](http://exploringjs.com/es6/ch_modules.html) instead.  For example:  ### `Button.js`  ```js import React, { Component } from 'react';  class Button extends Component {   render() {     // ...   } }  export default Button; // Don\u2019t forget to use export default! ```  ### `DangerButton.js`   ```js import React, { Component } from 'react'; import Button from './Button'; // Import a component from another file  class DangerButton extends Component {   render() {     return <Button color=\"red\" />;   } }  export default DangerButton; ```  Be aware of the [difference between default and named exports](http://stackoverflow.com/questions/36795819/react-native-es-6-when-should-i-use-curly-braces-for-import/36796281#36796281). It is a common source of mistakes.  We suggest that you stick to using default imports and exports when a module only exports a single thing (for example, a component). That\u2019s what you get when you use `export default Button` and `import Button from './Button'`.  Named exports are useful for utility modules that export several functions. A module may have at most one default export and as many named exports as you like.  Learn more about ES6 modules:  * [When to use the curly braces?](http://stackoverflow.com/questions/36795819/react-native-es-6-when-should-i-use-curly-braces-for-import/36796281#36796281) * [Exploring ES6: Modules](http://exploringjs.com/es6/ch_modules.html) * [Understanding ES6: Modules](https://leanpub.com/understandinges6/read#leanpub-auto-encapsulating-code-with-modules)  ## Adding a Stylesheet  This project setup uses [Webpack](https://webpack.github.io/) for handling all assets. Webpack offers a custom way of \u201cextending\u201d the concept of `import` beyond JavaScript. To express that a JavaScript file depends on a CSS file, you need to **import the CSS from the JavaScript file**:  ### `Button.css`  ```css .Button {   padding: 20px; } ```  ### `Button.js`  ```js import React, { Component } from 'react'; import './Button.css'; // Tell Webpack that Button.js uses these styles  class Button extends Component {   render() {     // You can use them as regular CSS styles     return <div className=\"Button\" />;   } } ```  **This is not required for React** but many people find this feature convenient. You can read about the benefits of this approach [here](https://medium.com/seek-ui-engineering/block-element-modifying-your-javascript-components-d7f99fcab52b). However you should be aware that this makes your code less portable to other build tools and environments than Webpack.  In development, expressing dependencies this way allows your styles to be reloaded on the fly as you edit them. In production, all CSS files will be concatenated into a single minified `.css` file in the build output.  If you are concerned about using Webpack-specific semantics, you can put all your CSS right into `src/index.css`. It would still be imported from `src/index.js`, but you could always remove that import if you later migrate to a different build tool.  ## Post-Processing CSS  This project setup minifies your CSS and adds vendor prefixes to it automatically through [Autoprefixer](https://github.com/postcss/autoprefixer) so you don\u2019t need to worry about it.  For example, this:  ```css .App {   display: flex;   flex-direction: row;   align-items: center; } ```  becomes this:  ```css .App {   display: -webkit-box;   display: -ms-flexbox;   display: flex;   -webkit-box-orient: horizontal;   -webkit-box-direction: normal;       -ms-flex-direction: row;           flex-direction: row;   -webkit-box-align: center;       -ms-flex-align: center;           align-items: center; } ```  There is currently no support for preprocessors such as Less, or for sharing variables across CSS files.  ## Adding Images and Fonts  With Webpack, using static assets like images and fonts works similarly to CSS.  You can **`import` an image right in a JavaScript module**. This tells Webpack to include that image in the bundle. Unlike CSS imports, importing an image or a font gives you a string value. This value is the final image path you can reference in your code.  Here is an example:  ```js import React from 'react'; import logo from './logo.png'; // Tell Webpack this JS file uses this image  console.log(logo); // /logo.84287d09.png  function Header() {   // Import result is the URL of your image   return <img src={logo} alt=\"Logo\" />; }  export default function Header; ```  This works in CSS too:  ```css .Logo {   background-image: url(./logo.png); } ```  Webpack finds all relative module references in CSS (they start with `./`) and replaces them with the final paths from the compiled bundle. If you make a typo or accidentally delete an important file, you will see a compilation error, just like when you import a non-existent JavaScript module. The final filenames in the compiled bundle are generated by Webpack from content hashes. If the file content changes in the future, Webpack will give it a different name in production so you don\u2019t need to worry about long-term caching of assets.  Please be advised that this is also a custom feature of Webpack.  **It is not required for React** but many people enjoy it (and React Native uses a similar mechanism for images). However it may not be portable to some other environments, such as Node.js and Browserify. If you prefer to reference static assets in a more traditional way outside the module system, please let us know [in this issue](https://github.com/facebookincubator/create-react-app/issues/28), and we will consider support for this.  ## Adding Bootstrap  You don\u2019t have to use [React Bootstrap](https://react-bootstrap.github.io) together with React but it is a popular library for integrating Bootstrap with React apps. If you need it, you can integrate it with Create React App by following these steps:  Install React Bootstrap and Bootstrap from NPM. React Bootstrap does not include Bootstrap CSS so this needs to be installed as well:  ``` npm install react-bootstrap --save npm install bootstrap@3 --save ```  Import Bootstrap CSS and optionally Bootstrap theme CSS in the ```src/index.js``` file:  ```js import 'bootstrap/dist/css/bootstrap.css'; import 'bootstrap/dist/css/bootstrap-theme.css'; ```  Import required React Bootstrap components within ```src/App.js``` file or your custom component files:  ```js import { Navbar, Jumbotron, Button } from 'react-bootstrap'; ```  Now you are ready to use the imported React Bootstrap components within your component hierarchy defined in the render method. Here is an example [`App.js`](https://gist.githubusercontent.com/gaearon/85d8c067f6af1e56277c82d19fd4da7b/raw/6158dd991b67284e9fc8d70b9d973efe87659d72/App.js) redone using React Bootstrap.  ## Adding Flow  Flow typing is currently [not supported out of the box](https://github.com/facebookincubator/create-react-app/issues/72) with the default `.flowconfig` generated by Flow. If you run it, you might get errors like this:  ```js node_modules/fbjs/lib/Deferred.js.flow:60  60:     Promise.prototype.done.apply(this._promise, arguments);                            ^^^^ property `done`. Property not found in 495: declare class Promise<+R> {      ^ Promise. See lib: /private/tmp/flow/flowlib_34952d31/core.js:495  node_modules/fbjs/lib/shallowEqual.js.flow:29  29:     return x !== 0 || 1 / (x: $FlowIssue) === 1 / (y: $FlowIssue);                                    ^^^^^^^^^^ identifier `$FlowIssue`. Could not resolve name  src/App.js:3   3: import logo from './logo.svg';                       ^^^^^^^^^^^^ ./logo.svg. Required module not found  src/App.js:4   4: import './App.css';             ^^^^^^^^^^^ ./App.css. Required module not found  src/index.js:5   5: import './index.css';             ^^^^^^^^^^^^^ ./index.css. Required module not found ```  To fix this, change your `.flowconfig` to look like this:  ```ini [libs] ./node_modules/fbjs/flow/lib  [options] esproposal.class_static_fields=enable esproposal.class_instance_fields=enable  module.name_mapper='^\\(.*\\)\\.css$' -> 'react-scripts/config/flow/css' module.name_mapper='^\\(.*\\)\\.\\(jpg\\|png\\|gif\\|eot\\|otf\\|webp\\|svg\\|ttf\\|woff\\|woff2\\|mp4\\|webm\\)$' -> 'react-scripts/config/flow/file'  suppress_type=$FlowIssue suppress_type=$FlowFixMe ```  Re-run flow, and you shouldn\u2019t get any extra issues.  If you later `eject`, you\u2019ll need to replace `react-scripts` references with the `<PROJECT_ROOT>` placeholder, for example:  ```ini module.name_mapper='^\\(.*\\)\\.css$' -> '<PROJECT_ROOT>/config/flow/css' module.name_mapper='^\\(.*\\)\\.\\(jpg\\|png\\|gif\\|eot\\|otf\\|webp\\|svg\\|ttf\\|woff\\|woff2\\|mp4\\|webm\\)$' -> '<PROJECT_ROOT>/config/flow/file' ```  We will consider integrating more tightly with Flow in the future so that you don\u2019t have to do this.  ## Adding Custom Environment Variables  >Note: this feature is available with `react-scripts@0.2.3` and higher.  Your project can consume variables declared in your environment as if they were declared locally in your JS files. By default you will have `NODE_ENV` defined for you, and any other environment variables starting with `REACT_APP_`. These environment variables will be defined for you on `process.env`. For example, having an environment variable named `REACT_APP_SECRET_CODE` will be exposed in your JS as `process.env.REACT_APP_SECRET_CODE`, in addition to `process.env.NODE_ENV`.  These environment variables can be useful for displaying information conditionally based on where the project is deployed or consuming sensitive data that lives outside of version control.  First, you need to have environment variables defined, which can vary between OSes. For example, let's say you wanted to consume a secret defined in the environment inside a `<form>`:  ```jsx render() {   return (     <div>       <small>You are running this application in <b>{process.env.NODE_ENV}</b> mode.</small>       <form>         <input type=\"hidden\" defaultValue={process.env.REACT_APP_SECRET_CODE} />       </form>     </div>   ); } ```  The above form is looking for a variable called `REACT_APP_SECRET_CODE` from the environment. In order to consume this value, we need to have it defined in the environment:  ### Windows (cmd.exe)  ```cmd set REACT_APP_SECRET_CODE=abcdef&&npm start ```  (Note: the lack of whitespace is intentional.)  ### Linux, OS X (Bash)  ```bash REACT_APP_SECRET_CODE=abcdef npm start ```  > Note: Defining environment variables in this manner is temporary for the life of the shell session. Setting permanent environment variables is outside the scope of these docs.  With our environment variable defined, we start the app and consume the values. Remember that the `NODE_ENV` variable will be set for you automatically. When you load the app in the browser and inspect the `<input>`, you will see its value set to `abcdef`, and the bold text will show the environment provided when using `npm start`:  ```html <div>   <small>You are running this application in <b>development</b> mode.</small>   <form>     <input type=\"hidden\" value=\"abcdef\" />   </form> </div> ```  Having access to the `NODE_ENV` is also useful for performing actions conditionally:  ```js if (process.env.NODE_ENV !== 'production') {   analytics.disable(); } ```  ## Integrating with a Node Backend  Check out [this tutorial](https://www.fullstackreact.com/articles/using-create-react-app-with-a-server/) for instructions on integrating an app with a Node backend running on another port, and using `fetch()` to access it. You can find the companion GitHub repository [here](https://github.com/fullstackreact/food-lookup-demo).  ## Proxying API Requests in Development  >Note: this feature is available with `react-scripts@0.2.3` and higher.  People often serve the front-end React app from the same host and port as their backend implementation.   For example, a production setup might look like this after the app is deployed:  ``` /             - static server returns index.html with React app /todos        - static server returns index.html with React app /api/todos    - server handles any /api/* requests using the backend implementation ```  Such setup is **not** required. However, if you **do** have a setup like this, it is convenient to write requests like `fetch('/api/todos')` without worrying about redirecting them to another host or port during development.  To tell the development server to proxy any unknown requests to your API server in development, add a `proxy` field to your `package.json`, for example:  ```js   \"proxy\": \"http://localhost:4000\", ```  This way, when you `fetch('/api/todos')` in development, the development server will recognize that it\u2019s not a static asset, and will proxy your request to `http://localhost:4000/api/todos` as a fallback.  Conveniently, this avoids [CORS issues](http://stackoverflow.com/questions/21854516/understanding-ajax-cors-and-security-considerations) and error messages like this in development:  ``` Fetch API cannot load http://localhost:4000/api/todos. No 'Access-Control-Allow-Origin' header is present on the requested resource. Origin 'http://localhost:3000' is therefore not allowed access. If an opaque response serves your needs, set the request's mode to 'no-cors' to fetch the resource with CORS disabled. ```  Keep in mind that `proxy` only has effect in development (with `npm start`), and it is up to you to ensure that URLs like `/api/todos` point to the right thing in production. You don\u2019t have to use the `/api` prefix. Any unrecognized request will be redirected to the specified `proxy`.  Currently the `proxy` option only handles HTTP requests, and it won\u2019t proxy WebSocket connections.   If the `proxy` option is **not** flexible enough for you, alternatively you can:  * Enable CORS on your server ([here\u2019s how to do it for Express](http://enable-cors.org/server_expressjs.html)). * Use [environment variables](#adding-custom-environment-variables) to inject the right server host and port into your app.  ## Deployment  By default, Create React App produces a build assuming your app is hosted at the server root.   To override this, specify the `homepage` in your `package.json`, for example:  ```js   \"homepage\": \"http://mywebsite.com/relativepath\", ```  This will let Create React App correctly infer the root path to use in the generated HTML file.  ### Now  See [this example](https://github.com/xkawi/create-react-app-now) for a zero-configuration single-command deployment with [now](https://zeit.co/now).  ### Heroku  Use the [Heroku Buildpack for Create React App](https://github.com/mars/create-react-app-buildpack).   You can find instructions in [Deploying React with Zero Configuration](https://blog.heroku.com/deploying-react-with-zero-configuration).  ### Surge  Install the Surge CLI if you haven't already by running `npm install -g surge`. Run the `surge` command and log in you or create a new account. You just need to specify the *build* folder and your custom domain, and you are done.  ```sh               email: email@domain.com            password: ********        project path: /path/to/project/build                size: 7 files, 1.8 MB              domain: create-react-app.surge.sh              upload: [====================] 100%, eta: 0.0s    propagate on CDN: [====================] 100%                plan: Free               users: email@domain.com          IP Address: X.X.X.X      Success! Project is published and running at create-react-app.surge.sh ```  Note that in order to support routers that use html5 `pushState` API, you may want to rename the `index.html` in your build folder to `200.html` before deploying to Surge. This [ensures that every URL falls back to that file](https://surge.sh/help/adding-a-200-page-for-client-side-routing).  ### GitHub Pages  >Note: this feature is available with `react-scripts@0.2.0` and higher.  Open your `package.json` and add a `homepage` field:  ```js   \"homepage\": \"http://myusername.github.io/my-app\", ```  **The above step is important!**   Create React App uses the `homepage` field to determine the root URL in the built HTML file.  Now, whenever you run `npm run build`, you will see a cheat sheet with a sequence of commands to deploy to GitHub pages:  ```sh git commit -am \"Save local changes\" git checkout -B gh-pages git add -f build git commit -am \"Rebuild website\" git filter-branch -f --prune-empty --subdirectory-filter build git push -f origin gh-pages git checkout - ```  You may copy and paste them, or put them into a custom shell script. You may also customize them for another hosting provider.  Note that GitHub Pages doesn't support routers that use the HTML5 `pushState` history API under the hood (for example, React Router using `browserHistory`). This is because when there is a fresh page load for a url like `http://user.github.io/todomvc/todos/42`, where `/todos/42` is a frontend route, the GitHub Pages server returns 404 because it knows nothing of `/todos/42`. If you want to add a router to a project hosted on GitHub Pages, here are a couple of solutions: * You could switch from using HTML5 history API to routing with hashes. If you use React Router, you can switch to `hashHistory` for this effect, but the URL will be longer and more verbose (for example, `http://user.github.io/todomvc/#/todos/42?_k=yknaj`). [Read more](https://github.com/reactjs/react-router/blob/master/docs/guides/Histories.md#histories) about different history implementations in React Router. * Alternatively, you can use a trick to teach GitHub Pages to handle 404 by redirecting to your `index.html` page with a special redirect parameter. You would need to add a `404.html` file with the redirection code to the `build` folder before deploying your project, and you\u2019ll need to add code handling the redirect parameter to `index.html`. You can find a detailed explanation of this technique [in this guide](https://github.com/rafrex/spa-github-pages).  ## Something Missing?  If you have ideas for more \u201cHow To\u201d recipes that should be on this page, [let us know](https://github.com/facebookincubator/create-react-app/issues) or [contribute some!](https://github.com/facebookincubator/create-react-app/edit/master/template/README.md)",
            "url": "https://github.com/rramatchandran/big-o-performance-java",
            "resource_type": "github_project",
            "duration": null,
            "difficulty": null,
            "tags": [],
            "estimated_completion_time": null
          },
          {
            "title": "react-material-tags",
            "description": "React component for tipical form control - tags. Has TextField with AutoComplete and tag list.",
            "url": "https://github.com/maciejsikora/react-material-tags",
            "resource_type": "github_project",
            "duration": null,
            "difficulty": null,
            "tags": [],
            "estimated_completion_time": null
          }
        ],
        "objectives": [
          "Create controlled components.",
          "Handle form submission.",
          "Validate user input.",
          "Build a simple registration form."
        ],
        "estimated_hours": 6.0,
        "deadline": "2024-11-24 00:00:00",
        "completed": false,
        "progress_percentage": 0.0
      },
      {
        "week_number": 6,
        "title": "React Project: Building a Simple Application",
        "description": "Apply learned concepts to build a small application.",
        "resources": [
          {
            "title": "How To Learn React",
            "description": "HowTo #Learn #React.",
            "url": "https://www.youtube.com/watch?v=w6F3ePCQuSY",
            "resource_type": "youtube_video",
            "duration": "PT6M45S",
            "difficulty": null,
            "tags": [
              "codingwithbasir",
              "coding",
              "programming",
              "tutorial",
              "lesson",
              "codepen"
            ],
            "estimated_completion_time": null
          },
          {
            "title": "2 - Project Explanation, Building the Search Component - React Tutorials   Learn React",
            "description": "Here is a simple Recipe search application that will take in your keywords and give you a list of recipes and ingredients of those ...",
            "url": "https://www.youtube.com/watch?v=uL6rRxLsIgc",
            "resource_type": "youtube_video",
            "duration": "PT17M",
            "difficulty": null,
            "tags": [
              "React js",
              "React js crash course",
              "Reactjs tutorial",
              "reactjs for beginners",
              "react js website",
              "react js project from scratch",
              "react tutorial",
              "react tutorial for beginners",
              "react tutorial 2019",
              "react tutorial 2020",
              "react tutorial freecodecamp",
              "react tutorial net ninja",
              "react tutorial codeevolution",
              "javascript",
              "javascript tutorial",
              "javascript tutorial for beginners",
              "javascript project",
              "learn react",
              "learn react js",
              "learn react in 30 minutes",
              "recipe application"
            ],
            "estimated_completion_time": null
          },
          {
            "title": "What Is ReactJS? | ReactJS Tutorial For Beginners | Learn ReactJS | ReactJS  Basics | Simplilearn",
            "description": "Full Stack Java Developer Program (Discount Code - YTBE15) ...",
            "url": "https://www.youtube.com/watch?v=Y6aYx_KKM7A",
            "resource_type": "youtube_video",
            "duration": "PT9M30S",
            "difficulty": null,
            "tags": [
              "reactjs basics",
              "what is reactjs",
              "learn reactjs",
              "reactjs tutorial for beginners",
              "reactjs tutorial",
              "reactjs project",
              "reactjs crash course",
              "reactjs project from scratch",
              "reactjs beginner tutorial",
              "reactjs basic concepts",
              "reactjs beginners",
              "reactjs build for production",
              "reactjs beginner to advanced",
              "reactjs beginner projects",
              "reactjs tutorial beginner to advanced",
              "react js project step by step",
              "reactjs simplilearn",
              "simplilearn",
              "react js",
              "react js tutorial"
            ],
            "estimated_completion_time": null
          },
          {
            "title": "backend-generator-cli",
            "description": "Backend Generator CLI is a simple yet powerful command-line tool that helps you quickly scaffold a well-structured backend project. With built-in best practices and customizable code snippets, this tool is designed to streamline your development workflow and help you focus on what matters: building your application. Link to the npm package\ud83d\udc47",
            "url": "https://github.com/PranavBarthwal/backend-generator-cli",
            "resource_type": "github_project",
            "duration": null,
            "difficulty": null,
            "tags": [
              "backend",
              "express",
              "gssoc-ext",
              "hacktoberfest",
              "hacktoberfest-accepted",
              "javascript",
              "mern-stack",
              "nodejs",
              "npm",
              "npm-cli",
              "npm-package",
              "npm-packages",
              "npmjs",
              "react"
            ],
            "estimated_completion_time": null
          },
          {
            "title": "calculator-react",
            "description": "This is a solo project as part of the Microverse curriculum, it is a simple react application where I built a real-world project for a fictional company that is about building a calculator and has different milestones and some technical requirements to follow. ",
            "url": "https://github.com/rubenpazch/calculator-react",
            "resource_type": "github_project",
            "duration": null,
            "difficulty": null,
            "tags": [
              "css",
              "es6",
              "heroku",
              "javascript",
              "nodejs",
              "react"
            ],
            "estimated_completion_time": null
          }
        ],
        "objectives": [
          "Design and implement a simple application.",
          "Use all concepts learned in previous weeks.",
          "Deploy the application (optional)."
        ],
        "estimated_hours": 10.0,
        "deadline": "2024-12-01 00:00:00",
        "completed": false,
        "progress_percentage": 0.0
      }
    ],
    "created_at": "2025-08-11 03:24:05.577450",
    "last_updated": "2025-08-11 03:24:05.577450",
    "overall_progress": 0.0
  },
  "progress_updates": [],
  "adaptive_recommendations": [],
  "created_at": "2025-08-11 03:24:05.577450",
  "last_updated": "2025-08-11 03:24:05.577450"
}