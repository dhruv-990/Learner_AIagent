{
  "topic": "Node.js",
  "experience_level": "beginner",
  "time_commitment": "5-10 hours per week",
  "learning_goals": "",
  "study_plan": {
    "topic": "Node.js",
    "experience_level": "beginner",
    "time_commitment": "5-10 hours per week",
    "learning_goals": "",
    "total_weeks": 6,
    "weekly_goals": [
      {
        "week_number": 1,
        "title": "Introduction to Node.js and JavaScript Fundamentals",
        "description": "Learn about Node.js, its architecture, and essential JavaScript concepts.",
        "resources": [
          {
            "title": "Javascript Introduction | Lecture 1 | Web Development Course",
            "description": "Complete C++ Placement Course (Data Structures+Algorithm) ...",
            "url": "https://www.youtube.com/watch?v=B7wHpNUUT4Y",
            "resource_type": "youtube_video",
            "duration": "PT7M48S",
            "difficulty": null,
            "tags": [
              "C++",
              "C++ coding",
              "C++ full course",
              "C++ placement course",
              "how to code",
              "programming",
              "college placement course",
              "C++ language"
            ],
            "estimated_completion_time": null
          },
          {
            "title": "Node.js Ultimate Beginner\u2019s Guide in 7 Easy Steps",
            "description": "Why learn Node.js in 2020? Master the fundamentals of Node in 7 easy steps, then build a fullstack web app and deploy it to a ...",
            "url": "https://www.youtube.com/watch?v=ENrzD9HAZK4",
            "resource_type": "youtube_video",
            "duration": "PT16M20S",
            "difficulty": null,
            "tags": [
              "webdev",
              "app development",
              "lesson",
              "tutorial",
              "node",
              "deno",
              "node.js",
              "nodejs basics",
              "nodejs tutorial",
              "php",
              "fullstack web",
              "http",
              "gcp"
            ],
            "estimated_completion_time": null
          },
          {
            "title": "What Is Node.js? | Introduction To Node.js | Node JS Tutorial For Beginners | Simplilearn",
            "description": "Full Stack Java Developer Program (Discount Code - YTBE15) ...",
            "url": "https://www.youtube.com/watch?v=8u1o-OmOeGQ",
            "resource_type": "youtube_video",
            "duration": "PT12M58S",
            "difficulty": null,
            "tags": [
              "what is node js",
              "what is node.js",
              "what is nodejs",
              "what is node js used for",
              "what is node.js used for",
              "introduction to nodejs",
              "introduction to node.js",
              "introduction to node js",
              "node js tutorial",
              "node.js tutorial",
              "nodejs tutorial",
              "node js tutorial for beginners",
              "node.js tutorial for beginners",
              "node js project",
              "node js concepts",
              "basics of node js",
              "basics of node.js",
              "node js basics for beginners",
              "node.js concepts",
              "node.js",
              "simplilearn node.js",
              "simplilearn"
            ],
            "estimated_completion_time": null
          },
          {
            "title": "Trybe_Exercises",
            "description": "# Trybe  This repository contains all the learning activities developed by Jo\u00e3o V.S Dias https://www.linkedin.com/in/diasvictorj/_ while studying at [Trybe](https://www.betrybe.com/) :rocket:  _\"Trybe is a school of the future for anyone who wants to improve their life and build a successful career in technology, where people only pay when they get a good job.\"_  The program has more than 1,500 hours of classroom and online classes, covers an introduction to software development, front-end, back-end, computer science, software engineering, agile methodologies and behavioral skills.  ## Web Development Fundamentals :white_check_mark:  ##### Block 1: Introduction - Unix & Shell  - [ ] 1-3: _Unix & Shell- Part 1_ - [ ] 1-4: _Unix & Shell- Part 2_  ##### Block 2: Git & GitHub  - [ ] 2-1: _What is it and what is it for?_ - [ ] 2-2: _Understanding the commands_ - [ ] 2-3: _Internet - Understanding how it works_  ##### Block 3: Introduction - HTML & CSS  - [ ] 3-1: _HTML & CSS - Page Structures_ - [ ] 3-2: _HTML & CSS - Getting Started with CSS_ - [ ] 3-3: _HTML & CSS - Selectors and positioning_ - [ ] 3-4: _Semantic HTML_ - [ ] 3-5: _[Project - HTML & CSS]()_  ##### Block 4: Introduction - JavaScript  - [ ] 4-1: _JavaScript - First steps_ - [ ] 4-2: _JavaScript - Array and For_ loop - [ ] 4-3: _JavaScript - Programming Logic and Algorithms_ - [ ] 4-4: _JavaScript - Objects and Functions_ - [ ] 4-5: _[Project - Playground Functions]()_  ##### Block 5: Introduction - JavaScript - Projects  - [ ] 5-1: _JavaScript - DOM and selectors_ - [ ] 5-2: _JavaScript - Working with elements_ - [ ] 5-3: _JavaScript - Events_ - [ ] 5-4: _JavaScript - Web Storage_ - [ ] 5-5: _[Project - Meme Generator]()_ - [ ] 5-6: _[Project - Pixel Art]()_ - [ ] 5-7: _[Project - Task List]()_ - [ ] 5-7: _[Project - Guess the Color]()_ - [ ] 5-7: _[Project - Mysterious Letter]()_  ##### Block 6: Advanced HTML & CSS  - [ ] 6-1: _HTML & CSS - Forms_ - [ ] 6-2: _JavaScript Libraries and CSS Frameworks_ - [ ] 6-3: _CSS Flexbox - Part 1_ - [ ] 6-4: _CSS Flexbox - Part 2_ - [ ] 6-5: _CSS Responsive - Mobile First_ - [ ] 6-6: _[Project - Facebook homepage]()_  ##### Block 7: JavaScript ES6 & Unit Tests  - [ ] 7-1: _JavaScript ES6 - let, const, arrow functions and template literals_ - [ ] 7-2: _JavaScript ES6 - Objects_ - [ ] 7-3: _Unit tests in JavaScript_ - [ ] 7-4: _[Project - JavaScript Unit Tests]()_  ##### Block 8: JavaScript ES6  - [ ] 8-1: _JavaScript ES6 - Higher Order Functions - forEach, find, some, every, sort_ - [ ] 8-2: _JavaScript ES6 - Higher Order Functions - map and filter_ - [ ] 8-3: _JavaScript ES6 - Higher Order Functions - reduce_ - [ ] 8-4: _JavaScript ES6 - spread operator, rest parameter, destructuring and more_ - [ ] 8-5: _[Project - Zoo functions]()_  ##### Block 9: Asynchronicity & Callbacks  - [ ] 9-1: _Asynchronous JavaScript and Callbacks_ - [ ] 9-2: _JavaScript Promises_ - [ ] 9-3: _[Project - Shopping Cart]()_  ##### Block 10: Jest  - [ ] 10-1: _First steps in Jest_ - [ ] 10-2: _Jest - Asynchronous Tests_ - [ ] 10-3: _Jest - Simulating behavior_ - [ ] 10-4: _[Project - Asynchronous Jest and Mocking]()_  ## Front-end development :hourglass_flowing_sand:  ##### Block 11: Introduction - React  - [ ] 11-1: _'Hello, world!' on React!_ - [ ] 11-2: _React Components_ - [ ] 11-3: _[Project - Movie Cards Library]()_  ##### Block 12: React  - [ ] 12-1: _Components with status_ - [ ] 12-2: _Events and forms in React_ - [ ] 12-3: _[Project - Movie Cards Library Stateful]()_  ##### Block 13: React  - [ ] 13-1: _Improving component reuse: props.children and PropTypes_ - [ ] 13-2: _Component lifecycle in React_ - [ ] 13-3: _React Router_ - [ ] 13-4: _[Project - Movie Cards Library CRUD]()_  ##### Block 14: Agile Methodologies  - [ ] 14-1: _Agile Methodologies_ - [ ] 14-2: _[Project - Frontend Online Store]()_  ##### Block 15: Tests in React  - [ ] 15-1: _Testing React with the React Testing Library_ - [ ] 15-2: _Testing React with the React Testing Library - Part 2_ - [ ] 15-3: _[Project - Tests in React]()_  ##### Block 16: Introduction to Redux  - [ ] 16-1: _Introduction to Redux_ - [ ] 16-2: _React with Redux - Part 1_ - [ ] 16-3: _React with Redux - Practice_ - [ ] 16-4: _React with Redux - Part 2_ - [ ] 16-5: _Synchronous tests with React-Redux_ - [ ] 16-6: _[Project - Table with data filters]()_  ##### Block 17: Project React  - [ ] 17-1: _[Project - Trivia Game]()_  ##### Block 18: React & Context API  - [ ] 18-1: _Context API of React_ - [ ] 18-2: _React Hooks - useState and useContext_ - [ ] 18-3: _React Hooks - useEffect and Custom Hooks_ - [ ] 18-4: _[Project - StarWars Datatable with Context API and Hooks]()_  ##### Block 19: Front-end Final Project  - [ ] 19-1: _[Project - Recipe App]()_  ## Back-end Development :hourglass_flowing_sand:  ##### Block 20: Introduction - Relational Databases  - [ ] 20-1: _SQL Database_ - [ ] 20-2: _Finding data in a database_ - [ ] 20-3: _Filtering data specifically_ - [ ] 20-4: _Manipulating tables_ - [ ] 20-5: _[Project - All For One]()_  ##### Block 21: Relational Databases  - [ ] 21-1: _Most used functions in SQL_ - [ ] 21-2: _Uncomplicating JOINs and UNIONs_ - [ ] 21-3: _Stored Routines & Subqueries_ - [ ] 21-4: _[Project - Vocabulary Booster]()_  ##### Block 22: Relational Databases  - [ ] 22-1: _Transforming ideas into a database model_ - [ ] 22-2: _Normalization, Normal Forms and Dumps_ - [ ] 22-2: _Turning ideas into a database model - Part 2_ - [ ] 22-3: _[Project - One For All]()_  ##### Block 23: Introduction - NoSQL  - [ ] 23-1: _MongoDB - Introduction_ - [ ] 23-2: _Filter Operators_ - [ ] 23-3: _[Project - Date Flights]()_  ##### Block 24: Updates  - [ ] 24-1: _Simple Updates_ - [ ] 24-2: _Complex Updates - Arrays - Part 1_ - [ ] 24-3: _Complex Updates - Arrays - Part 2_ - [ ] 24-4: _[Project - Commerce]()_  ##### Block 25: Aggregation Framework  - [ ] 25-1: _Aggregation Framework - Part 1_ - [ ] 25-2: _Aggregation Framework - Part 2_ - [ ] 25-3: _[Project - Aggregations]()_  ##### Block 26: Intro - NodeJS  - [ ] 26-1: _NodeJS - Introduction_ - [ ] 26-2: _NodeJS - Asynchronous Flow_ - [ ] 26-3: _NodeJS - Architecture_ - [ ] 26-4: _[Project - A CLI of Ice and Fire]()_  ##### Block 27: NodeJS  - [ ] 27-1: _Express: HTTP with Node.js_ - [ ] 27-2: _Software Architecture - Introduction to MVC_ - [ ] 27-3: _[Project - Cookmaster]()_  ##### Block 28: NodeJS  - [ ] 28-1: _Software Architecture - Service Layer_ - [ ] 28-2: _Web Architecture - Rest and Restful_ - [ ] 28-3: _[Project - Store Manager]()_  ##### Block 29: NodeJS  - [ ] 29-1: _NodeJS - JWT - (JSON Web Token)_ - [ ] 29-2: _NodeJS - Upload files with Multer_ - [ ] 29-3: _[Project - Cookmaster V2]()_  ##### Block 30: Introduction - Deploy  - [ ] 30-1: _Infrastructure - Deploy with Heroku_ - [ ] 30-2: _Deploy - Process Managers_ - [ ] 30-3: _[Project - Stranger Things]()_  ##### Block 31: Project  - [ ] 31-1: _[Project - Trybeer]()_  ##### Block 32: Software Architecture  - [ ] 32-1: _Architecture - SOLID Principles_ - [ ] 32-2: _ORM - Application interface with the database_ - [ ] 32-3: _Software Architecture - DDD_ - [ ] 32-4: _Good practice writing tests_ - [ ] 32-3: _[Project - Blogs API]()_  ##### Block 33: Sockets  - [ ] 30-1: _Sockets - TCP/UDP & NET_ - [ ] 30-2: _Sockets - Socket.io_ - [ ] 30-3: _[Project - Webchat]()_  ##### Block 34: Project  - [ ] 34-1: _[Project - Trybeer V2]()_  ## Computer Science :hourglass_flowing_sand:  ##### Block 35: Introduction - Computer Science  - [ ] 35-1: _Computer Architecture_ - [ ] 35-2: _Network architecture_ - [ ] 35-3: _Computer networks, tools and security_ - [ ] 35-4: _[Project - Exploring the protocols]()_  ##### Block 36: Python  - [ ] 35-1: _Learning Python_ - [ ] 35-2: _Tests and Exceptions_ - [ ] 35-3: _Data Input and Output_ - [ ] 36-4: _Data Input and Output_ - [ ] 35-5: _[Project - Tech news]()_  # [...]",
            "url": "https://github.com/diasvictorj/Trybe_Exercises",
            "resource_type": "github_project",
            "duration": null,
            "difficulty": null,
            "tags": [],
            "estimated_completion_time": null
          }
        ],
        "objectives": [
          "Understand what Node.js is and its use cases.",
          "Review fundamental JavaScript concepts (variables, data types, operators, control flow, functions).",
          "Set up your Node.js development environment."
        ],
        "estimated_hours": 6.0,
        "deadline": "2024-10-27 00:00:00",
        "completed": false,
        "progress_percentage": 0.0
      },
      {
        "week_number": 2,
        "title": "Working with Modules and the NPM Package Manager",
        "description": "Learn how to use modules and manage dependencies with npm.",
        "resources": [
          {
            "title": "Modules and npm package in Node.js | Mastering Node.js Modules : Step-by-Step Tutorial | In Hindi \ud83d\udd25\ud83d\udd25",
            "description": "Welcome to my comprehensive guide on Node.js Modules and npm package management. In this tutorial, we'll explore the ...",
            "url": "https://www.youtube.com/watch?v=7ntVTIU9f4o",
            "resource_type": "youtube_video",
            "duration": "PT18M59S",
            "difficulty": null,
            "tags": [
              "Node.js Modules",
              "npm Package Management",
              "Node.js Basics",
              "JavaScript Modules",
              "CommonJS",
              "Import and Export Modules",
              "Node.js Dependencies",
              "npm Install",
              "Package.json",
              "Node.js Development",
              "npm Commands",
              "Node.js Tutorial",
              "Node.js for Beginners",
              "Node.js Programming",
              "JavaScript Development",
              "Node Package Manager",
              "npm Tutorial",
              "Node.js Project Structure",
              "npm Packages",
              "JavaScript ES6 Modules",
              "Node.js Basics for Beginners",
              "Node.js Application Architecture"
            ],
            "estimated_completion_time": null
          },
          {
            "title": "Install Node JS and NPM Lite-Server | NODE JS Basics | Commands in Description",
            "description": "This is my first technical content on #YouTube, where I have discussed the installation procedure for Node Package Manager ...",
            "url": "https://www.youtube.com/watch?v=LBTQA-esQc4",
            "resource_type": "youtube_video",
            "duration": "PT6M13S",
            "difficulty": null,
            "tags": [
              "nodejs",
              "windows",
              "node",
              "install",
              "js",
              "lite-server",
              "development",
              "install node js",
              "node js installation"
            ],
            "estimated_completion_time": null
          },
          {
            "title": "What is NPM? | Node JS",
            "description": "What is NPM? Node Package Manager NodeJS Support by becoming a Member ...",
            "url": "https://www.youtube.com/watch?v=M8nlgBQBxxo",
            "resource_type": "youtube_video",
            "duration": "PT8M53S",
            "difficulty": null,
            "tags": [
              "telusko",
              "navin",
              "reddy",
              "tutorial",
              "java",
              "python",
              "blockchain",
              "django"
            ],
            "estimated_completion_time": null
          }
        ],
        "objectives": [
          "Understand the concept of modules in Node.js.",
          "Learn how to install and manage packages using npm.",
          "Create a simple Node.js project using external modules."
        ],
        "estimated_hours": 5.0,
        "deadline": "2024-11-03 00:00:00",
        "completed": false,
        "progress_percentage": 0.0
      },
      {
        "week_number": 3,
        "title": "Building a Simple Web Server",
        "description": "Build a basic web server using Node.js and the `http` module.",
        "resources": [
          {
            "title": "Node.js | Section 1 | Introduction &amp; Setup | NodeJS Beginners | Simple  | Easy Learning #nodejs",
            "description": "Nodejs #NodejsSetup #BackendDevelopment #WebDevelopment #NodejsTutorial #LearnNodejs **Start Your Node.js ...",
            "url": "https://www.youtube.com/watch?v=HSUqB2SWPkw",
            "resource_type": "youtube_video",
            "duration": "PT18M46S",
            "difficulty": null,
            "tags": [
              "#nodejs",
              "#html",
              "#css",
              "#javascript",
              "#reactjs",
              "#programming",
              "#python",
              "#angular",
              "#webdeveloper",
              "#php",
              "#java",
              "#webdevelopment",
              "#coding",
              "#developer",
              "#js",
              "#vuejs",
              "#programmer",
              "#jquery",
              "#software",
              "#react",
              "#webdesign",
              "#softwaredeveloper",
              "#mongodb",
              "#code",
              "#laravel",
              "#android",
              "#mysql",
              "#coder",
              "#frontend",
              "nodejsinstall",
              "nodejs for beginners"
            ],
            "estimated_completion_time": null
          },
          {
            "title": "Creating a Simple Web Server | NodeJS Tutorials | Free Online Courses | Nursery To Varsity",
            "description": "In today's video we are going to learn how we can create a simple web server in NodeJs. For this we need to install NodeJs in our ...",
            "url": "https://www.youtube.com/watch?v=UIpV8tNxTdc",
            "resource_type": "youtube_video",
            "duration": "PT11M45S",
            "difficulty": null,
            "tags": [],
            "estimated_completion_time": null
          },
          {
            "title": "Node JS Tutorial for Beginners - Creating a Server | in hindi",
            "description": "Node js tutorial, how to create web server in nodejs in hindi node js tutorial node js nodejs tutorial node js tutorial for beginners ...",
            "url": "https://www.youtube.com/watch?v=60zPgMU8lu0",
            "resource_type": "youtube_video",
            "duration": "PT6M9S",
            "difficulty": null,
            "tags": [],
            "estimated_completion_time": null
          },
          {
            "title": "express-mongodb-quickstart",
            "description": "This is a boilerplate for building web applications with Node.js, Express, and MongoDB. It includes a basic Express server set up with user authentication using  JWT tokens, as well as a simple MongoDB schema for storing user data",
            "url": "https://github.com/kkafi09/express-mongodb-quickstart",
            "resource_type": "github_project",
            "duration": null,
            "difficulty": null,
            "tags": [],
            "estimated_completion_time": null
          },
          {
            "title": "simple_webServer",
            "description": "BUILDING A SIMPLE WEB SERVER  IN NODE.JS",
            "url": "https://github.com/donkennie/simple_webServer",
            "resource_type": "github_project",
            "duration": null,
            "difficulty": null,
            "tags": [],
            "estimated_completion_time": null
          }
        ],
        "objectives": [
          "Create a simple HTTP server.",
          "Handle requests and responses.",
          "Serve static files."
        ],
        "estimated_hours": 7.0,
        "deadline": "2024-11-10 00:00:00",
        "completed": false,
        "progress_percentage": 0.0
      },
      {
        "week_number": 4,
        "title": "Working with Files and the File System",
        "description": "Learn how to interact with the file system using Node.js.",
        "resources": [
          {
            "title": "File System or FS Module in Node JS | Node Js Tutorial",
            "description": "NodeJS #FileSystem #FSModule The `fs` module in Node.js handles file and directory operations, supporting both async and ...",
            "url": "https://www.youtube.com/watch?v=bNpvbsUXi6E",
            "resource_type": "youtube_video",
            "duration": "PT4M18S",
            "difficulty": null,
            "tags": [
              "Rapid Tutor"
            ],
            "estimated_completion_time": null
          },
          {
            "title": "Working with Files: fs and path Modules | Sigma Web Development Course - Tutorial #87",
            "description": "Latest Udemy Web dev Course With Certificate: https://goharry.in/webdev Access the Sigma web development course playlist: ...",
            "url": "https://www.youtube.com/watch?v=BTcmvrCTyNg",
            "resource_type": "youtube_video",
            "duration": "PT17M32S",
            "difficulty": null,
            "tags": [],
            "estimated_completion_time": null
          },
          {
            "title": "Node.js FS Module | Working with files | Node.js Tutorial for Beginners in Hindi/Urdu | IT-Learners",
            "description": "nodejs ,#nodejstutorial ,#nodeforbeginners ,#nodejsinhindi ,#nodejsinurdu,#javascript,#nodejsfsmodule,#nodejsfilesystem, ...",
            "url": "https://www.youtube.com/watch?v=msnoEYUoliQ",
            "resource_type": "youtube_video",
            "duration": "PT15M32S",
            "difficulty": null,
            "tags": [
              "nodejs",
              "nodej.js",
              "node.js tutorial in hindi",
              "node.js tutorial in urdu",
              "node.js tutorial for beginners",
              "node js tutorial",
              "node js tutorial in hindi",
              "node js tutorial for beginners",
              "node js for beginners",
              "node js in hindi",
              "node js in urdu",
              "javascript node js",
              "node js fs module",
              "node.js fs module",
              "node js file system module",
              "node.js working with files"
            ],
            "estimated_completion_time": null
          },
          {
            "title": "big-o-performance-java",
            "description": "# big-o-performance A simple html app to demonstrate performance costs of data structures.  - Clone the project - Navigate to the root of the project in a termina or command prompt - Run 'npm install' - Run 'npm start' - Go to the URL specified in the terminal or command prompt to try out the app.  # This app was created from the Create React App NPM.  Below are instructions from that project.  Below you will find some information on how to perform common tasks.   You can find the most recent version of this guide [here](https://github.com/facebookincubator/create-react-app/blob/master/template/README.md).  ## Table of Contents  - [Updating to New Releases](#updating-to-new-releases) - [Sending Feedback](#sending-feedback) - [Folder Structure](#folder-structure) - [Available Scripts](#available-scripts)   - [npm start](#npm-start)   - [npm run build](#npm-run-build)   - [npm run eject](#npm-run-eject) - [Displaying Lint Output in the Editor](#displaying-lint-output-in-the-editor) - [Installing a Dependency](#installing-a-dependency) - [Importing a Component](#importing-a-component) - [Adding a Stylesheet](#adding-a-stylesheet) - [Post-Processing CSS](#post-processing-css) - [Adding Images and Fonts](#adding-images-and-fonts) - [Adding Bootstrap](#adding-bootstrap) - [Adding Flow](#adding-flow) - [Adding Custom Environment Variables](#adding-custom-environment-variables) - [Integrating with a Node Backend](#integrating-with-a-node-backend) - [Proxying API Requests in Development](#proxying-api-requests-in-development) - [Deployment](#deployment)   - [Now](#now)   - [Heroku](#heroku)   - [Surge](#surge)   - [GitHub Pages](#github-pages) - [Something Missing?](#something-missing)  ## Updating to New Releases  Create React App is divided into two packages:  * `create-react-app` is a global command-line utility that you use to create new projects. * `react-scripts` is a development dependency in the generated projects (including this one).  You almost never need to update `create-react-app` itself: it\u2019s delegates all the setup to `react-scripts`.  When you run `create-react-app`, it always creates the project with the latest version of `react-scripts` so you\u2019ll get all the new features and improvements in newly created apps automatically.  To update an existing project to a new version of `react-scripts`, [open the changelog](https://github.com/facebookincubator/create-react-app/blob/master/CHANGELOG.md), find the version you\u2019re currently on (check `package.json` in this folder if you\u2019re not sure), and apply the migration instructions for the newer versions.  In most cases bumping the `react-scripts` version in `package.json` and running `npm install` in this folder should be enough, but it\u2019s good to consult the [changelog](https://github.com/facebookincubator/create-react-app/blob/master/CHANGELOG.md) for potential breaking changes.  We commit to keeping the breaking changes minimal so you can upgrade `react-scripts` painlessly.  ## Sending Feedback  We are always open to [your feedback](https://github.com/facebookincubator/create-react-app/issues).  ## Folder Structure  After creation, your project should look like this:  ``` my-app/   README.md   index.html   favicon.ico   node_modules/   package.json   src/     App.css     App.js     index.css     index.js     logo.svg ```  For the project to build, **these files must exist with exact filenames**:  * `index.html` is the page template; * `favicon.ico` is the icon you see in the browser tab; * `src/index.js` is the JavaScript entry point.  You can delete or rename the other files.  You may create subdirectories inside `src`. For faster rebuilds, only files inside `src` are processed by Webpack.   You need to **put any JS and CSS files inside `src`**, or Webpack won\u2019t see them.  You can, however, create more top-level directories.   They will not be included in the production build so you can use them for things like documentation.  ## Available Scripts  In the project directory, you can run:  ### `npm start`  Runs the app in the development mode.<br> Open [http://localhost:3000](http://localhost:3000) to view it in the browser.  The page will reload if you make edits.<br> You will also see any lint errors in the console.  ### `npm run build`  Builds the app for production to the `build` folder.<br> It correctly bundles React in production mode and optimizes the build for the best performance.  The build is minified and the filenames include the hashes.<br> Your app is ready to be deployed!  ### `npm run eject`  **Note: this is a one-way operation. Once you `eject`, you can\u2019t go back!**  If you aren\u2019t satisfied with the build tool and configuration choices, you can `eject` at any time. This command will remove the single build dependency from your project.  Instead, it will copy all the configuration files and the transitive dependencies (Webpack, Babel, ESLint, etc) right into your project so you have full control over them. All of the commands except `eject` will still work, but they will point to the copied scripts so you can tweak them. At this point you\u2019re on your own.  You don\u2019t have to ever use `eject`. The curated feature set is suitable for small and middle deployments, and you shouldn\u2019t feel obligated to use this feature. However we understand that this tool wouldn\u2019t be useful if you couldn\u2019t customize it when you are ready for it.  ## Displaying Lint Output in the Editor  >Note: this feature is available with `react-scripts@0.2.0` and higher.  Some editors, including Sublime Text, Atom, and Visual Studio Code, provide plugins for ESLint.  They are not required for linting. You should see the linter output right in your terminal as well as the browser console. However, if you prefer the lint results to appear right in your editor, there are some extra steps you can do.  You would need to install an ESLint plugin for your editor first.  >**A note for Atom `linter-eslint` users**  >If you are using the Atom `linter-eslint` plugin, make sure that **Use global ESLint installation** option is checked:  ><img src=\"http://i.imgur.com/yVNNHJM.png\" width=\"300\">  Then make sure `package.json` of your project ends with this block:  ```js {   // ...   \"eslintConfig\": {     \"extends\": \"./node_modules/react-scripts/config/eslint.js\"   } } ```  Projects generated with `react-scripts@0.2.0` and higher should already have it.   If you don\u2019t need ESLint integration with your editor, you can safely delete those three lines from your `package.json`.  Finally, you will need to install some packages *globally*:  ```sh npm install -g eslint babel-eslint eslint-plugin-react eslint-plugin-import eslint-plugin-jsx-a11y eslint-plugin-flowtype ```  We recognize that this is suboptimal, but it is currently required due to the way we hide the ESLint dependency. The ESLint team is already [working on a solution to this](https://github.com/eslint/eslint/issues/3458) so this may become unnecessary in a couple of months.  ## Installing a Dependency  The generated project includes React and ReactDOM as dependencies. It also includes a set of scripts used by Create React App as a development dependency. You may install other dependencies (for example, React Router) with `npm`:  ``` npm install --save <library-name> ```  ## Importing a Component  This project setup supports ES6 modules thanks to Babel.   While you can still use `require()` and `module.exports`, we encourage you to use [`import` and `export`](http://exploringjs.com/es6/ch_modules.html) instead.  For example:  ### `Button.js`  ```js import React, { Component } from 'react';  class Button extends Component {   render() {     // ...   } }  export default Button; // Don\u2019t forget to use export default! ```  ### `DangerButton.js`   ```js import React, { Component } from 'react'; import Button from './Button'; // Import a component from another file  class DangerButton extends Component {   render() {     return <Button color=\"red\" />;   } }  export default DangerButton; ```  Be aware of the [difference between default and named exports](http://stackoverflow.com/questions/36795819/react-native-es-6-when-should-i-use-curly-braces-for-import/36796281#36796281). It is a common source of mistakes.  We suggest that you stick to using default imports and exports when a module only exports a single thing (for example, a component). That\u2019s what you get when you use `export default Button` and `import Button from './Button'`.  Named exports are useful for utility modules that export several functions. A module may have at most one default export and as many named exports as you like.  Learn more about ES6 modules:  * [When to use the curly braces?](http://stackoverflow.com/questions/36795819/react-native-es-6-when-should-i-use-curly-braces-for-import/36796281#36796281) * [Exploring ES6: Modules](http://exploringjs.com/es6/ch_modules.html) * [Understanding ES6: Modules](https://leanpub.com/understandinges6/read#leanpub-auto-encapsulating-code-with-modules)  ## Adding a Stylesheet  This project setup uses [Webpack](https://webpack.github.io/) for handling all assets. Webpack offers a custom way of \u201cextending\u201d the concept of `import` beyond JavaScript. To express that a JavaScript file depends on a CSS file, you need to **import the CSS from the JavaScript file**:  ### `Button.css`  ```css .Button {   padding: 20px; } ```  ### `Button.js`  ```js import React, { Component } from 'react'; import './Button.css'; // Tell Webpack that Button.js uses these styles  class Button extends Component {   render() {     // You can use them as regular CSS styles     return <div className=\"Button\" />;   } } ```  **This is not required for React** but many people find this feature convenient. You can read about the benefits of this approach [here](https://medium.com/seek-ui-engineering/block-element-modifying-your-javascript-components-d7f99fcab52b). However you should be aware that this makes your code less portable to other build tools and environments than Webpack.  In development, expressing dependencies this way allows your styles to be reloaded on the fly as you edit them. In production, all CSS files will be concatenated into a single minified `.css` file in the build output.  If you are concerned about using Webpack-specific semantics, you can put all your CSS right into `src/index.css`. It would still be imported from `src/index.js`, but you could always remove that import if you later migrate to a different build tool.  ## Post-Processing CSS  This project setup minifies your CSS and adds vendor prefixes to it automatically through [Autoprefixer](https://github.com/postcss/autoprefixer) so you don\u2019t need to worry about it.  For example, this:  ```css .App {   display: flex;   flex-direction: row;   align-items: center; } ```  becomes this:  ```css .App {   display: -webkit-box;   display: -ms-flexbox;   display: flex;   -webkit-box-orient: horizontal;   -webkit-box-direction: normal;       -ms-flex-direction: row;           flex-direction: row;   -webkit-box-align: center;       -ms-flex-align: center;           align-items: center; } ```  There is currently no support for preprocessors such as Less, or for sharing variables across CSS files.  ## Adding Images and Fonts  With Webpack, using static assets like images and fonts works similarly to CSS.  You can **`import` an image right in a JavaScript module**. This tells Webpack to include that image in the bundle. Unlike CSS imports, importing an image or a font gives you a string value. This value is the final image path you can reference in your code.  Here is an example:  ```js import React from 'react'; import logo from './logo.png'; // Tell Webpack this JS file uses this image  console.log(logo); // /logo.84287d09.png  function Header() {   // Import result is the URL of your image   return <img src={logo} alt=\"Logo\" />; }  export default function Header; ```  This works in CSS too:  ```css .Logo {   background-image: url(./logo.png); } ```  Webpack finds all relative module references in CSS (they start with `./`) and replaces them with the final paths from the compiled bundle. If you make a typo or accidentally delete an important file, you will see a compilation error, just like when you import a non-existent JavaScript module. The final filenames in the compiled bundle are generated by Webpack from content hashes. If the file content changes in the future, Webpack will give it a different name in production so you don\u2019t need to worry about long-term caching of assets.  Please be advised that this is also a custom feature of Webpack.  **It is not required for React** but many people enjoy it (and React Native uses a similar mechanism for images). However it may not be portable to some other environments, such as Node.js and Browserify. If you prefer to reference static assets in a more traditional way outside the module system, please let us know [in this issue](https://github.com/facebookincubator/create-react-app/issues/28), and we will consider support for this.  ## Adding Bootstrap  You don\u2019t have to use [React Bootstrap](https://react-bootstrap.github.io) together with React but it is a popular library for integrating Bootstrap with React apps. If you need it, you can integrate it with Create React App by following these steps:  Install React Bootstrap and Bootstrap from NPM. React Bootstrap does not include Bootstrap CSS so this needs to be installed as well:  ``` npm install react-bootstrap --save npm install bootstrap@3 --save ```  Import Bootstrap CSS and optionally Bootstrap theme CSS in the ```src/index.js``` file:  ```js import 'bootstrap/dist/css/bootstrap.css'; import 'bootstrap/dist/css/bootstrap-theme.css'; ```  Import required React Bootstrap components within ```src/App.js``` file or your custom component files:  ```js import { Navbar, Jumbotron, Button } from 'react-bootstrap'; ```  Now you are ready to use the imported React Bootstrap components within your component hierarchy defined in the render method. Here is an example [`App.js`](https://gist.githubusercontent.com/gaearon/85d8c067f6af1e56277c82d19fd4da7b/raw/6158dd991b67284e9fc8d70b9d973efe87659d72/App.js) redone using React Bootstrap.  ## Adding Flow  Flow typing is currently [not supported out of the box](https://github.com/facebookincubator/create-react-app/issues/72) with the default `.flowconfig` generated by Flow. If you run it, you might get errors like this:  ```js node_modules/fbjs/lib/Deferred.js.flow:60  60:     Promise.prototype.done.apply(this._promise, arguments);                            ^^^^ property `done`. Property not found in 495: declare class Promise<+R> {      ^ Promise. See lib: /private/tmp/flow/flowlib_34952d31/core.js:495  node_modules/fbjs/lib/shallowEqual.js.flow:29  29:     return x !== 0 || 1 / (x: $FlowIssue) === 1 / (y: $FlowIssue);                                    ^^^^^^^^^^ identifier `$FlowIssue`. Could not resolve name  src/App.js:3   3: import logo from './logo.svg';                       ^^^^^^^^^^^^ ./logo.svg. Required module not found  src/App.js:4   4: import './App.css';             ^^^^^^^^^^^ ./App.css. Required module not found  src/index.js:5   5: import './index.css';             ^^^^^^^^^^^^^ ./index.css. Required module not found ```  To fix this, change your `.flowconfig` to look like this:  ```ini [libs] ./node_modules/fbjs/flow/lib  [options] esproposal.class_static_fields=enable esproposal.class_instance_fields=enable  module.name_mapper='^\\(.*\\)\\.css$' -> 'react-scripts/config/flow/css' module.name_mapper='^\\(.*\\)\\.\\(jpg\\|png\\|gif\\|eot\\|otf\\|webp\\|svg\\|ttf\\|woff\\|woff2\\|mp4\\|webm\\)$' -> 'react-scripts/config/flow/file'  suppress_type=$FlowIssue suppress_type=$FlowFixMe ```  Re-run flow, and you shouldn\u2019t get any extra issues.  If you later `eject`, you\u2019ll need to replace `react-scripts` references with the `<PROJECT_ROOT>` placeholder, for example:  ```ini module.name_mapper='^\\(.*\\)\\.css$' -> '<PROJECT_ROOT>/config/flow/css' module.name_mapper='^\\(.*\\)\\.\\(jpg\\|png\\|gif\\|eot\\|otf\\|webp\\|svg\\|ttf\\|woff\\|woff2\\|mp4\\|webm\\)$' -> '<PROJECT_ROOT>/config/flow/file' ```  We will consider integrating more tightly with Flow in the future so that you don\u2019t have to do this.  ## Adding Custom Environment Variables  >Note: this feature is available with `react-scripts@0.2.3` and higher.  Your project can consume variables declared in your environment as if they were declared locally in your JS files. By default you will have `NODE_ENV` defined for you, and any other environment variables starting with `REACT_APP_`. These environment variables will be defined for you on `process.env`. For example, having an environment variable named `REACT_APP_SECRET_CODE` will be exposed in your JS as `process.env.REACT_APP_SECRET_CODE`, in addition to `process.env.NODE_ENV`.  These environment variables can be useful for displaying information conditionally based on where the project is deployed or consuming sensitive data that lives outside of version control.  First, you need to have environment variables defined, which can vary between OSes. For example, let's say you wanted to consume a secret defined in the environment inside a `<form>`:  ```jsx render() {   return (     <div>       <small>You are running this application in <b>{process.env.NODE_ENV}</b> mode.</small>       <form>         <input type=\"hidden\" defaultValue={process.env.REACT_APP_SECRET_CODE} />       </form>     </div>   ); } ```  The above form is looking for a variable called `REACT_APP_SECRET_CODE` from the environment. In order to consume this value, we need to have it defined in the environment:  ### Windows (cmd.exe)  ```cmd set REACT_APP_SECRET_CODE=abcdef&&npm start ```  (Note: the lack of whitespace is intentional.)  ### Linux, OS X (Bash)  ```bash REACT_APP_SECRET_CODE=abcdef npm start ```  > Note: Defining environment variables in this manner is temporary for the life of the shell session. Setting permanent environment variables is outside the scope of these docs.  With our environment variable defined, we start the app and consume the values. Remember that the `NODE_ENV` variable will be set for you automatically. When you load the app in the browser and inspect the `<input>`, you will see its value set to `abcdef`, and the bold text will show the environment provided when using `npm start`:  ```html <div>   <small>You are running this application in <b>development</b> mode.</small>   <form>     <input type=\"hidden\" value=\"abcdef\" />   </form> </div> ```  Having access to the `NODE_ENV` is also useful for performing actions conditionally:  ```js if (process.env.NODE_ENV !== 'production') {   analytics.disable(); } ```  ## Integrating with a Node Backend  Check out [this tutorial](https://www.fullstackreact.com/articles/using-create-react-app-with-a-server/) for instructions on integrating an app with a Node backend running on another port, and using `fetch()` to access it. You can find the companion GitHub repository [here](https://github.com/fullstackreact/food-lookup-demo).  ## Proxying API Requests in Development  >Note: this feature is available with `react-scripts@0.2.3` and higher.  People often serve the front-end React app from the same host and port as their backend implementation.   For example, a production setup might look like this after the app is deployed:  ``` /             - static server returns index.html with React app /todos        - static server returns index.html with React app /api/todos    - server handles any /api/* requests using the backend implementation ```  Such setup is **not** required. However, if you **do** have a setup like this, it is convenient to write requests like `fetch('/api/todos')` without worrying about redirecting them to another host or port during development.  To tell the development server to proxy any unknown requests to your API server in development, add a `proxy` field to your `package.json`, for example:  ```js   \"proxy\": \"http://localhost:4000\", ```  This way, when you `fetch('/api/todos')` in development, the development server will recognize that it\u2019s not a static asset, and will proxy your request to `http://localhost:4000/api/todos` as a fallback.  Conveniently, this avoids [CORS issues](http://stackoverflow.com/questions/21854516/understanding-ajax-cors-and-security-considerations) and error messages like this in development:  ``` Fetch API cannot load http://localhost:4000/api/todos. No 'Access-Control-Allow-Origin' header is present on the requested resource. Origin 'http://localhost:3000' is therefore not allowed access. If an opaque response serves your needs, set the request's mode to 'no-cors' to fetch the resource with CORS disabled. ```  Keep in mind that `proxy` only has effect in development (with `npm start`), and it is up to you to ensure that URLs like `/api/todos` point to the right thing in production. You don\u2019t have to use the `/api` prefix. Any unrecognized request will be redirected to the specified `proxy`.  Currently the `proxy` option only handles HTTP requests, and it won\u2019t proxy WebSocket connections.   If the `proxy` option is **not** flexible enough for you, alternatively you can:  * Enable CORS on your server ([here\u2019s how to do it for Express](http://enable-cors.org/server_expressjs.html)). * Use [environment variables](#adding-custom-environment-variables) to inject the right server host and port into your app.  ## Deployment  By default, Create React App produces a build assuming your app is hosted at the server root.   To override this, specify the `homepage` in your `package.json`, for example:  ```js   \"homepage\": \"http://mywebsite.com/relativepath\", ```  This will let Create React App correctly infer the root path to use in the generated HTML file.  ### Now  See [this example](https://github.com/xkawi/create-react-app-now) for a zero-configuration single-command deployment with [now](https://zeit.co/now).  ### Heroku  Use the [Heroku Buildpack for Create React App](https://github.com/mars/create-react-app-buildpack).   You can find instructions in [Deploying React with Zero Configuration](https://blog.heroku.com/deploying-react-with-zero-configuration).  ### Surge  Install the Surge CLI if you haven't already by running `npm install -g surge`. Run the `surge` command and log in you or create a new account. You just need to specify the *build* folder and your custom domain, and you are done.  ```sh               email: email@domain.com            password: ********        project path: /path/to/project/build                size: 7 files, 1.8 MB              domain: create-react-app.surge.sh              upload: [====================] 100%, eta: 0.0s    propagate on CDN: [====================] 100%                plan: Free               users: email@domain.com          IP Address: X.X.X.X      Success! Project is published and running at create-react-app.surge.sh ```  Note that in order to support routers that use html5 `pushState` API, you may want to rename the `index.html` in your build folder to `200.html` before deploying to Surge. This [ensures that every URL falls back to that file](https://surge.sh/help/adding-a-200-page-for-client-side-routing).  ### GitHub Pages  >Note: this feature is available with `react-scripts@0.2.0` and higher.  Open your `package.json` and add a `homepage` field:  ```js   \"homepage\": \"http://myusername.github.io/my-app\", ```  **The above step is important!**   Create React App uses the `homepage` field to determine the root URL in the built HTML file.  Now, whenever you run `npm run build`, you will see a cheat sheet with a sequence of commands to deploy to GitHub pages:  ```sh git commit -am \"Save local changes\" git checkout -B gh-pages git add -f build git commit -am \"Rebuild website\" git filter-branch -f --prune-empty --subdirectory-filter build git push -f origin gh-pages git checkout - ```  You may copy and paste them, or put them into a custom shell script. You may also customize them for another hosting provider.  Note that GitHub Pages doesn't support routers that use the HTML5 `pushState` history API under the hood (for example, React Router using `browserHistory`). This is because when there is a fresh page load for a url like `http://user.github.io/todomvc/todos/42`, where `/todos/42` is a frontend route, the GitHub Pages server returns 404 because it knows nothing of `/todos/42`. If you want to add a router to a project hosted on GitHub Pages, here are a couple of solutions: * You could switch from using HTML5 history API to routing with hashes. If you use React Router, you can switch to `hashHistory` for this effect, but the URL will be longer and more verbose (for example, `http://user.github.io/todomvc/#/todos/42?_k=yknaj`). [Read more](https://github.com/reactjs/react-router/blob/master/docs/guides/Histories.md#histories) about different history implementations in React Router. * Alternatively, you can use a trick to teach GitHub Pages to handle 404 by redirecting to your `index.html` page with a special redirect parameter. You would need to add a `404.html` file with the redirection code to the `build` folder before deploying your project, and you\u2019ll need to add code handling the redirect parameter to `index.html`. You can find a detailed explanation of this technique [in this guide](https://github.com/rafrex/spa-github-pages).  ## Something Missing?  If you have ideas for more \u201cHow To\u201d recipes that should be on this page, [let us know](https://github.com/facebookincubator/create-react-app/issues) or [contribute some!](https://github.com/facebookincubator/create-react-app/edit/master/template/README.md)",
            "url": "https://github.com/rramatchandran/big-o-performance-java",
            "resource_type": "github_project",
            "duration": null,
            "difficulty": null,
            "tags": [],
            "estimated_completion_time": null
          },
          {
            "title": "OReilly_Course_Mastering_Node_js_12_x_by_Dimitris_Loukas",
            "description": "A repo to host files created whilst following the OReilly course Mastering Node.js 12.x by Dimitris Loukas 'https://www.oreilly.com/library/view/mastering-nodejs-12x/9781789539899/'. The course description is: You will start off by working through the process of creating a subscription management system, where you will optimize directory structures. This will help you with the organization, as Node.js apps usually don\u2019t follow filename and directory conventions. As you delve deeper into the course, you\u2019ll learn how to build an API in the form of microservices, managed through PM2. As you progress, you will connect and utilize two of the most widely used technologies in the Node.js World; MySQL, the most commonly used relational database, and Redis, a popular technology used in caching. Once you\u2019ve built a solid infrastructure, you\u2019ll be able to build an authentication service with the help of Passport and JSON Web Tokens. By the end of this course, you will be able to tackle harder challenges in your Node.js projects by efficiently using the best tools available, while also meeting demanding industry standards for a clean and scalable code. The code bundle for this video course is available at https://github.com/PacktPublishing/Mastering-Node.js-11.x ",
            "url": "https://github.com/ma7ammad/OReilly_Course_Mastering_Node_js_12_x_by_Dimitris_Loukas",
            "resource_type": "github_project",
            "duration": null,
            "difficulty": null,
            "tags": [],
            "estimated_completion_time": null
          }
        ],
        "objectives": [
          "Read and write files.",
          "Create, delete, and rename files and directories."
        ],
        "estimated_hours": 5.0,
        "deadline": "2024-11-17 00:00:00",
        "completed": false,
        "progress_percentage": 0.0
      },
      {
        "week_number": 5,
        "title": "Introduction to Express.js",
        "description": "Learn the basics of Express.js, a popular Node.js web framework.",
        "resources": [
          {
            "title": "Node JS Express Framework | Node JS Tutorial | Tutorialspoint",
            "description": "Node JS tutorial for Beginners. In this 'Node JS' tutorial, you will learn about Node JS Express Framework. Free Certification in ...",
            "url": "https://www.youtube.com/watch?v=WgcTMxqqeBE",
            "resource_type": "youtube_video",
            "duration": "PT15M2S",
            "difficulty": null,
            "tags": [
              "Node.js - Express Framework",
              "Learn Node.js",
              "Basic tutorial on Node.js",
              "Node.js for beginners",
              "fundamentals of Node.js",
              "Node.js by Anadi Sharma",
              "Node.js by Tutorialspoint",
              "JS Express Framework",
              "Node JS Express Framework",
              "Node JS Tutorial",
              "Express Framework",
              "javascript",
              "node.js",
              "node js tutorial",
              "node js interview questions",
              "node js install",
              "nodejs",
              "node",
              "Node JS on Windows",
              "Install Node JS",
              "tutorialspoint",
              "anadi sharma tutorialspoint"
            ],
            "estimated_completion_time": null
          },
          {
            "title": "Node.js Tutorial for Beginners 20 - Introduction to Express.js",
            "description": "Express is a minimal and flexible Node.js web application framework that provides a robust set of features for web and mobile ...",
            "url": "https://www.youtube.com/watch?v=tnUIKTttvXQ",
            "resource_type": "youtube_video",
            "duration": "PT10M10S",
            "difficulty": null,
            "tags": [
              "Node.js",
              "Beginners",
              "debugger",
              "node",
              "debugging",
              "Modules",
              "Module",
              "Custom",
              "Nodejs",
              "fs module",
              "fs",
              "Streams",
              "HTML",
              "page",
              "node.js",
              "routing",
              "Node Package Manager",
              "npm",
              "npm init",
              "Express",
              "Express.js",
              "verview",
              "Environment",
              "Hello World",
              "Routing",
              "HTTP Methods"
            ],
            "estimated_completion_time": null
          },
          {
            "title": "What Is Express JS? | Express JS Tutorial for Beginners 2022 | Express JS API | Simplilearn",
            "description": "Full Stack Java Developer Program (Discount Code - YTBE15) ...",
            "url": "https://www.youtube.com/watch?v=0QRFOsrBtXw",
            "resource_type": "youtube_video",
            "duration": "PT5M8S",
            "difficulty": null,
            "tags": [
              "what is express js?",
              "express js tutorial for beginners 2022",
              "nodejs express tutorial",
              "expressjs in 2022",
              "express js typescript",
              "why should we use express js",
              "express js in one video",
              "what is express",
              "expressjs crash course",
              "express js api",
              "express node js",
              "express nodejs",
              "express node.js",
              "application programming interface",
              "express js tutorial",
              "express tutorial node js",
              "express api in node js",
              "expressjs",
              "node.js programming",
              "simplilearn expressjs",
              "simplilearn"
            ],
            "estimated_completion_time": null
          },
          {
            "title": "node-express-course",
            "description": "An introduction to Node.js and Express.js servers",
            "url": "https://github.com/eddiejaoude/node-express-course",
            "resource_type": "github_project",
            "duration": null,
            "difficulty": null,
            "tags": [],
            "estimated_completion_time": null
          },
          {
            "title": "node-express-course",
            "description": "An introduction to Node.js and Express.js servers",
            "url": "https://github.com/youssefchlendi/node-express-course",
            "resource_type": "github_project",
            "duration": null,
            "difficulty": null,
            "tags": [],
            "estimated_completion_time": null
          }
        ],
        "objectives": [
          "Understand what Express.js is and why it's used.",
          "Set up an Express.js project.",
          "Create simple routes and handle requests."
        ],
        "estimated_hours": 5.0,
        "deadline": "2024-11-24 00:00:00",
        "completed": false,
        "progress_percentage": 0.0
      },
      {
        "week_number": 6,
        "title": "Building a Simple REST API with Express.js",
        "description": "Build a small RESTful API using Express.js.",
        "resources": [
          {
            "title": "Create Simple REST API with Node.js &amp; Express | Node.js &amp; Express Tutorial | RESTful APIS",
            "description": "nodejs #restapis #expressjs In this video we will learn how to create a simple REST API with Node.js and Express.js. You will ...",
            "url": "https://www.youtube.com/watch?v=A7xG4_BCE6M",
            "resource_type": "youtube_video",
            "duration": "PT7M36S",
            "difficulty": null,
            "tags": [
              "create simple rest api with node js",
              "node js simple REST api",
              "node js express api",
              "returns json in nodejs",
              "how to learn node js",
              "node js simple tutorial",
              "create api with js",
              "create back end api with js",
              "javascript back end code",
              "simple js backend",
              "nodejs simple projects",
              "create Restful api with nodejs",
              "javascript tutorials",
              "node js with express js simple",
              "reactjs",
              "react tutorials",
              "react native",
              "frontend development",
              "back end development with js for beginners"
            ],
            "estimated_completion_time": null
          },
          {
            "title": "How to make Rest API&#39;s in Node and Express js | Building Rest API&#39;s in Node and Express js |Rest API",
            "description": "In this video, you will learn how to build a REST API using Node.js and Express.js step by step. Whether you're a complete ...",
            "url": "https://www.youtube.com/watch?v=TYn4epKIJEQ",
            "resource_type": "youtube_video",
            "duration": "PT12M45S",
            "difficulty": null,
            "tags": [
              "Rest API",
              "Rest API in Node js and Express js",
              "Rest API'S in Node js and Express js",
              "what is Rest API"
            ],
            "estimated_completion_time": null
          },
          {
            "title": "Express JS Tutorial in Hindi | Learn Express in 10 minutes | Node.js Rest API With Express JS",
            "description": "This video is a tutorial on the express framework in Hindi. You can learn how to build an express application and rest APIs using ...",
            "url": "https://www.youtube.com/watch?v=gzLNPIw1zNE",
            "resource_type": "youtube_video",
            "duration": "PT13M27S",
            "difficulty": null,
            "tags": [
              "nodejs",
              "express",
              "expressjs",
              "expresstutorial",
              "express tutorial hindi",
              "nodejs hindi",
              "express hindi",
              "rest api",
              "nodejs rest",
              "nodejs server",
              "express node tutorial in hindi",
              "expressjs tutorial hindi",
              "express node complete video",
              "experssjs complete course",
              "nodejs express video",
              "nodejs express tutorial",
              "nodejs express",
              "what is express",
              "what is express in node",
              "expressjs vs express",
              "express node server",
              "expressjs node server",
              "express demo node",
              "nodejs express demo",
              "node express demo",
              "API"
            ],
            "estimated_completion_time": null
          },
          {
            "title": "REST-API-using-node-and-express-js",
            "description": "User Management API- The **REST API Using Node.js and Express.js** project is a simple demonstration of building a RESTful API with Node.js and Express.js. It is designed to showcase basic CRUD operations using a mock data set.",
            "url": "https://github.com/styloraushan/REST-API-using-node-and-express-js",
            "resource_type": "github_project",
            "duration": null,
            "difficulty": null,
            "tags": [],
            "estimated_completion_time": null
          },
          {
            "title": "RESTNodeExpress",
            "description": "building a simple RESTful Api With Node.js And Express.Js",
            "url": "https://github.com/NatC02/RESTNodeExpress",
            "resource_type": "github_project",
            "duration": null,
            "difficulty": null,
            "tags": [],
            "estimated_completion_time": null
          }
        ],
        "objectives": [
          "Implement basic RESTful API endpoints (GET, POST, PUT, DELETE).",
          "Handle JSON data."
        ],
        "estimated_hours": 8.0,
        "deadline": "2024-12-01 00:00:00",
        "completed": false,
        "progress_percentage": 0.0
      }
    ],
    "created_at": "2025-08-08 21:35:41.958956",
    "last_updated": "2025-08-08 21:35:41.958956",
    "overall_progress": 0.0
  },
  "progress_updates": [],
  "adaptive_recommendations": [],
  "created_at": "2025-08-08 21:35:41.958956",
  "last_updated": "2025-08-08 21:35:41.958956"
}